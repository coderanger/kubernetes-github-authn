// Code generated by mockery v1.0.0
package mocks

import github "github.com/google/go-github/github"
import mock "github.com/stretchr/testify/mock"

// GithubService is an autogenerated mock type for the GithubService type
type GithubService struct {
	mock.Mock
}

// ListOrgMemberships provides a mock function with given fields: _a0
func (_m *GithubService) ListOrgMemberships(_a0 *github.ListOrgMembershipsOptions) ([]*github.Membership, *github.Response, error) {
	ret := _m.Called(_a0)

	var r0 []*github.Membership
	if rf, ok := ret.Get(0).(func(*github.ListOrgMembershipsOptions) []*github.Membership); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Membership)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(*github.ListOrgMembershipsOptions) *github.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*github.ListOrgMembershipsOptions) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListUserTeams provides a mock function with given fields: _a0
func (_m *GithubService) ListUserTeams(_a0 *github.ListOptions) ([]*github.Team, *github.Response, error) {
	ret := _m.Called(_a0)

	var r0 []*github.Team
	if rf, ok := ret.Get(0).(func(*github.ListOptions) []*github.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Team)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(*github.ListOptions) *github.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*github.ListOptions) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserGet provides a mock function with given fields: _a0
func (_m *GithubService) UserGet(_a0 string) (*github.User, *github.Response, error) {
	ret := _m.Called(_a0)

	var r0 *github.User
	if rf, ok := ret.Get(0).(func(string) *github.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.User)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(string) *github.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
